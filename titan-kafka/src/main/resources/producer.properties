# This is for bootstrapping and the producer will only use it for getting metadata (topics, partitions and replicas).
# The socket connections for sending the actual data will be established based on the broker information returned in the metadata.
# The format is host1:port1,host2:port2, and the list can be a subset of brokers or a VIP pointing to a subset of brokers.
#metadata.broker.list=10.91.71.228:9092
metadata.broker.list=9.12.235.62:9092

# The serializer class for messages.
serializer.class=kafka.serializer.DefaultEncoder

# The serializer class for keys (defaults to the same as for messages if nothing is given).
key.serializer.class=kafka.serializer.DefaultEncoder

# The partitioner class for partitioning messages amongst sub-topics.
# The default partitioner (kafka.producer.DefaultPartitioner) is based on the hash of the key.
partitioner.class=kafka.producer.DefaultPartitioner

# This value controls when a produce request is considered completed. Specifically, how many other brokers
# must have committed the data to their log and acknowledged this to the leader? Typical values are
#
#   0, which means that the producer never waits for an acknowledgement from the broker (the same behavior as 0.7).
#      This option provides the lowest latency but the weakest durability guarantees (some data will be lost when a server fails).
#   1, which means that the producer gets an acknowledgement after the leader replica has received the data.
#      This option provides better durability as the client waits until the server acknowledges the request as successful
#      (only messages that were written to the now-dead leader but not yet replicated will be lost).
#  -1, which means that the producer gets an acknowledgement after all in-sync replicas have received the data.
#      This option provides the best durability, we guarantee that no messages will be lost as long as at least one in sync replica remains. 
request.required.acks=1

# The amount of time the broker will wait trying to meet the request.required.acks requirement before sending back an error to the client.
request.timeout.ms=10000

# This property will cause the producer to automatically retry a failed send request.
# This property specifies the number of retries when such failures occur.
# Note that setting a non-zero value here can lead to duplicates in the case of network errors that cause a message to be sent but the acknowledgement to be lost.
message.send.max.retries=3

# Before each retry, the producer refreshes the metadata of relevant topics to see if a new leader has been elected.
# Since leader election takes a bit of time, this property specifies the amount of time that the producer waits before refreshing the metadata.
retry.backoff.ms=100

# This parameter allows you to specify the compression codec for all data generated by this producer.
# Valid values are "none", "gzip" and "snappy".
compression.codec=none

# This parameter specifies whether the messages are sent asynchronously in a background thread. Valid values are
# "async" for asynchronous send and "sync" for synchronous send.
# By setting the producer to async we allow batching together of requests (which is great for throughput)
# but open the possibility of a failure of the client machine dropping unsent data.
producer.type=async

# Maximum time to buffer data when using async mode.
# For example a setting of 100 will try to batch together 100ms of messages to send at once.
# This will improve throughput but adds message delivery latency due to the buffering.
queue.buffering.max.ms=5000

# The maximum number of unsent messages that can be queued up the producer when using async mode
# before either the producer must be blocked or data must be dropped.
queue.buffering.max.messages=10000

# The amount of time to block before dropping messages when running in async mode and
# the buffer has reached queue.buffering.max.messages.
# If set to 0 events will be enqueued immediately or dropped if the queue is full (the producer send call will never block).
# If set to -1 the producer will block indefinitely and never willingly drop a send.
queue.enqueue.timeout.ms=1000

# The number of messages to send in one batch when using async mode.
# The producer will wait until either this number of messages are ready to send or queue.buffer.max.ms is reached.
batch.num.messages=200

# Socket write buffer size.
send.buffer.bytes=102400

# zookeeper properties
hostport=10.91.71.97:2181

# location of properties file for TitanFactory
titan.config.location=../../../../../titan1.0.0.kafka/titan-kafka/src/main/resources/cass.properties
titan.log.name=kafkaproducer
